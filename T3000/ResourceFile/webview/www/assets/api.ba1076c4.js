class e{constructor(e="/api"){this.baseUrl=e}async fetchCurrentData(e,t){try{const a=await fetch(`${this.baseUrl}/t3000/current`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({device_id:e,channel_ids:t})});if(!a.ok)throw new Error(`Failed to fetch current data: ${a.statusText}`);return a.json()}catch(a){const e=Date.now();return this.generateMockData(t,e-18e5,e,5e3)}}async fetchTimeSeriesData(e,t,a,n,i){try{const s=await fetch(`${this.baseUrl}/t3000/timeseries`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({device_id:e,channel_ids:t,start_time:a,end_time:n,interval:i||5e3})});if(!s.ok)throw new Error(`Failed to fetch time series data: ${s.statusText}`);return s.json()}catch(s){return this.generateMockData(t,a,n,i||5e3)}}async fetchAvailableChannels(e){const t=await fetch(`${this.baseUrl}/t3000/channels/${e}`);if(!t.ok)throw new Error(`Failed to fetch channels: ${t.statusText}`);return(await t.json()).channels}async testConnection(e){try{const t=await fetch(`${this.baseUrl}/t3000/health/${e}`);if(!t.ok)throw new Error(`Connection test failed: ${t.statusText}`);return{status:"ok",message:(await t.json()).message||"Connection successful"}}catch(t){return{status:"error",message:t instanceof Error?t.message:"Unknown error"}}}async getData(e){const t=Date.now(),a=e.timeRange.to.valueOf()-e.timeRange.from.valueOf();let n;return n="string"==typeof e.channels[0]?e.channels.map(((e,t)=>t+1)):e.channels,a<36e5&&e.timeRange.to.valueOf()>t-3e5?this.fetchCurrentData(e.deviceId,n):this.fetchTimeSeriesData(e.deviceId,n,e.timeRange.from.valueOf(),e.timeRange.to.valueOf(),Math.max(1e3,a/1e3))}generateMockData(e,t,a,n=5e3){const i={},s=[{id:1,name:"Temperature 1",unit:"°F",type:"analog"},{id:2,name:"Temperature 2",unit:"°F",type:"analog"},{id:3,name:"Humidity",unit:"%RH",type:"analog"},{id:4,name:"CO2",unit:"PPM",type:"analog"},{id:5,name:"Pressure",unit:"PSI",type:"analog"},{id:6,name:"Light Level",unit:"Lux",type:"analog"},{id:7,name:"Flow Rate",unit:"CFM",type:"analog"},{id:8,name:"Power",unit:"W",type:"analog"},{id:9,name:"Relay 1",unit:"",type:"digital"},{id:10,name:"Relay 2",unit:"",type:"digital"},{id:11,name:"Fan Status",unit:"",type:"digital"},{id:12,name:"Alarm",unit:"",type:"digital"},{id:13,name:"Valve",unit:"",type:"digital"},{id:14,name:"Pump",unit:"",type:"digital"}];e.forEach((e=>{const r=s.find((t=>t.id===e));if(!r)return;const o=[];for(let i=t;i<=a;i+=n){let e;if("analog"===r.type){e=this.getBaseValue(r.id)+5*Math.sin(i/1e5)+2*(Math.random()-.5)}else{const t=3e4+6e4*Math.random();e=Math.sin(i/t)>0?1:0}o.push({time:i,value:e,quality:Math.random()>.95?"uncertain":"good"})}i[e]={name:r.name,unit:r.unit,type:r.type,values:o}}));return{deviceId:123,timestamp:Date.now(),channels:i}}getBaseValue(e){return{1:72,2:68,3:45,4:400,5:14.7,6:300,7:1200,8:2400}[e]||50}}const t=new e;export{e as T3000Api,t as t3000Api};
